#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Prueba automatizada del asistente de agenda.
Este script simula consultas reales usando los datos del Excel.
"""

import time
import random
import os
from colorama import init, Fore, Style
import google.generativeai as genai
from config import GOOGLE_API_KEY
from helpers.dynamic_loader import cargar_agenda_dinamica
from helpers.enhanced_query import process_query

# Inicializar colorama para colores en la terminal
init()

# Configurar clave de API
genai.configure(api_key=GOOGLE_API_KEY)

# Ruta al archivo de datos
DATOS_FILE = "datos/agenda.xlsx"

# Funci√≥n para simular la escritura humana (efecto de tipeo)
def escribir_con_efecto(texto, velocidad_min=0.03, velocidad_max=0.08):
    for caracter in texto:
        print(caracter, end='', flush=True)
        # Pausa m√°s larga en signos de puntuaci√≥n
        if caracter in ['.', ',', '!', '?', ':']:
            time.sleep(random.uniform(velocidad_min*2, velocidad_max*2))
        else:
            time.sleep(random.uniform(velocidad_min, velocidad_max))
    print()

# Funci√≥n para simular el tiempo de procesamiento del asistente
def simular_procesamiento(tiempo_min=0.5, tiempo_max=2.0):
    tiempo = random.uniform(tiempo_min, tiempo_max)

    # Diferentes mensajes de "pensando"
    mensajes = [
        f"{Fore.YELLOW}üîÑ Procesando...{Style.RESET_ALL}",
        f"{Fore.YELLOW}ü§î D√©jame pensar...{Style.RESET_ALL}",
        f"{Fore.YELLOW}üîç Buscando en la agenda...{Style.RESET_ALL}",
        f"{Fore.YELLOW}‚åõ Un momento...{Style.RESET_ALL}",
        f"{Fore.YELLOW}üí≠ Mmm...{Style.RESET_ALL}"
    ]

    print(random.choice(mensajes))
    time.sleep(tiempo)

# Funci√≥n para mostrar mensaje del humano con errores de tipeo ocasionales
def mensaje_humano(texto, probabilidad_error=0.3):
    print(f"\n{Fore.GREEN}üë§ Usuario: {Style.RESET_ALL}", end="")

    # Simular errores de tipeo
    if random.random() < probabilidad_error and len(texto) > 10:
        # Elegir tipo de error
        tipo_error = random.choice(["typo", "backspace", "pausa"])

        if tipo_error == "typo":
            # Insertar un car√°cter incorrecto y corregirlo
            pos = random.randint(5, len(texto) - 5)
            char_incorrecto = random.choice("qwertyuiopasdfghjklzxcvbnm")
            texto_con_error = texto[:pos] + char_incorrecto + texto[pos:]

            # Escribir hasta el error
            for i in range(pos + 1):
                print(texto_con_error[i], end='', flush=True)
                time.sleep(random.uniform(0.03, 0.1))

            # Pausa para "darse cuenta"
            time.sleep(0.3)

            # Borrar el error
            print("\b \b", end='', flush=True)
            time.sleep(0.2)

            # Continuar escribiendo
            for i in range(pos, len(texto)):
                print(texto[i], end='', flush=True)
                time.sleep(random.uniform(0.03, 0.1))
            print()

        elif tipo_error == "backspace":
            # Escribir una palabra incorrecta y borrarla
            palabras = texto.split()
            if len(palabras) > 3:
                pos_palabra = random.randint(1, len(palabras) - 2)
                palabra_original = palabras[pos_palabra]
                palabra_incorrecta = palabra_original[:2] + random.choice("qwertyuiopasdfghjklzxcvbnm") + palabra_original[2:]

                # Reconstruir texto hasta la palabra incorrecta
                texto_hasta = " ".join(palabras[:pos_palabra])

                # Escribir hasta ah√≠
                escribir_con_efecto(texto_hasta + " ", 0.03, 0.1, end="")

                # Escribir palabra incorrecta
                escribir_con_efecto(palabra_incorrecta, 0.03, 0.1, end="")

                # Borrar palabra incorrecta
                for _ in range(len(palabra_incorrecta)):
                    print("\b \b", end='', flush=True)
                    time.sleep(0.05)

                # Escribir palabra correcta y resto del texto
                escribir_con_efecto(palabra_original + " " + " ".join(palabras[pos_palabra+1:]), 0.03, 0.1)
            else:
                escribir_con_efecto(texto, 0.03, 0.1)

        elif tipo_error == "pausa":
            # Hacer una pausa en medio de la escritura
            pos = random.randint(len(texto)//3, 2*len(texto)//3)

            # Escribir hasta la pausa
            for i in range(pos):
                print(texto[i], end='', flush=True)
                time.sleep(random.uniform(0.03, 0.1))

            # Pausa como si estuviera pensando
            time.sleep(random.uniform(0.5, 1.5))

            # Continuar escribiendo
            for i in range(pos, len(texto)):
                print(texto[i], end='', flush=True)
                time.sleep(random.uniform(0.03, 0.1))
            print()
    else:
        escribir_con_efecto(texto, 0.03, 0.1)

    time.sleep(0.5)

# Funci√≥n para escribir con efecto y control de final de l√≠nea
def escribir_con_efecto(texto, velocidad_min=0.03, velocidad_max=0.08, end="\n"):
    for caracter in texto:
        print(caracter, end='', flush=True)
        # Pausa m√°s larga en signos de puntuaci√≥n
        if caracter in ['.', ',', '!', '?', ':']:
            time.sleep(random.uniform(velocidad_min*2, velocidad_max*2))
        else:
            time.sleep(random.uniform(velocidad_min, velocidad_max))
    print(end=end)

# Funci√≥n para mostrar mensaje del asistente con m√°s humanidad
def mensaje_asistente(texto, personalidad=0.7):
    simular_procesamiento()
    print(f"\n{Fore.BLUE}ü§ñ Asistente:{Style.RESET_ALL}")

    # A√±adir elementos conversacionales seg√∫n probabilidad
    if random.random() < personalidad:
        # Posibles muletillas iniciales
        muletillas_inicio = [
            "Mmm, ", "Veamos... ", "A ver... ", "D√©jame ver... ",
            "Bueno, ", "Pues ", "Ah, ", "Oh, "
        ]

        # Posibles expresiones finales
        expresiones_finales = [
            " ¬øNecesitas algo m√°s?", " ¬øTe sirve esta informaci√≥n?",
            " ¬øHay algo m√°s que quieras saber?", " ¬øTe puedo ayudar con algo m√°s?",
            " üòä", " üëç", " ¬øEst√° bien?"
        ]

        # Posibles expresiones intermedias
        expresiones_intermedias = [
            ", ¬øsabes?", ", mira,", ", f√≠jate,", ", ver√°s,"
        ]

        # Aplicar transformaciones
        texto_original = texto

        # A√±adir muletilla inicial (30% de probabilidad)
        if random.random() < 0.3 and not texto.startswith(("S√≠", "No", "Hay", "El", "La")):
            texto = random.choice(muletillas_inicio) + texto[0].lower() + texto[1:]

        # A√±adir expresi√≥n intermedia (20% de probabilidad)
        if random.random() < 0.2 and len(texto) > 20 and "," in texto:
            partes = texto.split(",", 1)
            if len(partes) > 1:
                texto = partes[0] + random.choice(expresiones_intermedias) + partes[1]

        # A√±adir expresi√≥n final (40% de probabilidad)
        if random.random() < 0.4 and not texto.endswith(("?", "!", "...")):
            texto = texto.rstrip(".") + random.choice(expresiones_finales)

    # Dividir respuestas largas en fragmentos para pausas naturales
    if len(texto) > 100:
        fragmentos = []
        palabras = texto.split(' ')
        fragmento_actual = ""

        for palabra in palabras:
            if len(fragmento_actual) + len(palabra) < 80:
                fragmento_actual += palabra + " "
            else:
                fragmentos.append(fragmento_actual)
                fragmento_actual = palabra + " "

        if fragmento_actual:
            fragmentos.append(fragmento_actual)

        for fragmento in fragmentos:
            escribir_con_efecto(fragmento, 0.01, 0.03)
            time.sleep(0.2)
    else:
        escribir_con_efecto(texto, 0.01, 0.03)

    # Pausa variable despu√©s de responder
    time.sleep(random.uniform(0.5, 1.2))

# Funci√≥n para procesar una consulta real
def procesar_consulta_real(pregunta, registros, esquema, mapeo_columnas):
    # Usar el enfoque centralizado de consultas
    resultado = process_query(pregunta, registros, esquema, mapeo_columnas)

    # Devolver solo la respuesta textual
    return resultado["response"]

# Funci√≥n principal para ejecutar la prueba automatizada
def ejecutar_prueba_automatizada():
    print(f"\n{Fore.YELLOW}{'=' * 60}{Style.RESET_ALL}")
    print(f"{Fore.YELLOW}üì± PRUEBA AUTOMATIZADA DEL ASISTENTE DE AGENDA{Style.RESET_ALL}")
    print(f"{Fore.YELLOW}{'=' * 60}{Style.RESET_ALL}")

    # Cargar datos reales
    print(f"{Fore.YELLOW}üìä Cargando datos reales desde {DATOS_FILE}...{Style.RESET_ALL}")
    resultado = cargar_agenda_dinamica(DATOS_FILE)

    if resultado["error"]:
        print(f"{Fore.RED}‚ùå Error al cargar datos: {resultado['error']}{Style.RESET_ALL}")
        return

    registros = resultado["registros"]
    esquema = resultado["esquema"]
    mapeo_columnas = resultado["mapeo_columnas"]

    print(f"{Fore.GREEN}‚úÖ Datos cargados: {len(registros)} registros{Style.RESET_ALL}")

    # Definir variantes de consultas para cada tipo
    variantes_consultas = {
        "telefono_juan": [
            "¬øCu√°l es el tel√©fono de Juan P√©rez?",
            "Me puedes dar el n√∫mero de Juan?",
            "Necesito llamar a Juan, ¬øtienes su tel√©fono?",
            "¬øTienes el n√∫mero de Juan por ah√≠?"
        ],
        "direccion_ana": [
            "¬øQu√© direcci√≥n tiene Ana Ram√≠rez?",
            "¬øD√≥nde vive Ana?",
            "Necesito ir a casa de Ana, ¬øcu√°l era su direcci√≥n?",
            "¬øMe puedes decir d√≥nde vive Ana Ram√≠rez?"
        ],
        "correo_carlos": [
            "¬øCu√°l es el correo electr√≥nico de Carlos Mart√≠nez?",
            "Necesito el email de Carlos",
            "¬øTienes el correo de Carlos por ah√≠?",
            "¬øMe pasas el mail de Carlos?"
        ],
        "edad_lucia": [
            "¬øCu√°ntos a√±os tiene Luc√≠a G√≥mez?",
            "¬øSabes la edad de Luc√≠a?",
            "¬øQu√© edad tiene Luc√≠a?",
            "¬øCu√°ntos a√±os cumpli√≥ Luc√≠a?"
        ],
        "persona_joven": [
            "¬øQui√©n es la persona m√°s joven?",
            "¬øCu√°l es el contacto m√°s joven que tengo?",
            "¬øQui√©n tiene menos a√±os en mi agenda?",
            "De todos mis contactos, ¬øqui√©n es el m√°s joven?"
        ],
        "mayores_30": [
            "¬øQui√©n tiene m√°s de 30 a√±os?",
            "¬øQu√© contactos son mayores de 30?",
            "Dime qui√©nes pasan de 30 a√±os",
            "¬øHay alguien mayor de 30 en mi agenda?"
        ],
        "total_personas": [
            "¬øCu√°ntas personas hay en la agenda?",
            "¬øCu√°ntos contactos tengo guardados?",
            "¬øCu√°nta gente hay en total?",
            "¬øN√∫mero total de contactos?"
        ],
        "total_hombres": [
            "¬øCu√°ntos hombres hay?",
            "¬øCu√°ntos contactos masculinos tengo?",
            "¬øN√∫mero de hombres en la agenda?",
            "¬øCu√°ntos de mis contactos son hombres?"
        ],
        "info_juan": [
            "Dame toda la informaci√≥n de Juan P√©rez",
            "Quiero saber todo sobre Juan",
            "¬øQu√© datos tenemos de Juan P√©rez?",
            "Mu√©strame el perfil completo de Juan"
        ],
        "comparacion_edad": [
            "¬øQui√©n es mayor, Juan o Ana?",
            "Entre Juan y Ana, ¬øqui√©n tiene m√°s a√±os?",
            "¬øAna es mayor que Juan o al rev√©s?",
            "¬øQui√©n naci√≥ primero, Juan o Ana?"
        ],
        "colonia_centro": [
            "¬øHay alguien que viva en Colonia Centro?",
            "¬øQui√©n vive en Colonia Centro?",
            "¬øTengo contactos en Colonia Centro?",
            "¬øAlguno de mis contactos tiene direcci√≥n en Colonia Centro?"
        ]
    }

    # Seleccionar una variante aleatoria para cada tipo de consulta
    consultas_seleccionadas = []
    for tipo, variantes in variantes_consultas.items():
        consultas_seleccionadas.append(random.choice(variantes))

    # Mensaje de bienvenida
    mensaje_asistente("¬°Hola! Soy tu asistente de agenda. Puedo responder preguntas sobre tus contactos. ¬øEn qu√© puedo ayudarte?")

    # Procesar cada consulta
    for i, consulta in enumerate(consultas_seleccionadas):
        # Simular pregunta del usuario
        mensaje_humano(consulta)

        # Procesar la consulta con datos reales
        respuesta = procesar_consulta_real(consulta, registros, esquema, mapeo_columnas)

        # Mostrar respuesta del asistente
        mensaje_asistente(respuesta)

        # A√±adir consultas de seguimiento ocasionalmente (30% de probabilidad)
        if i < len(consultas_seleccionadas) - 1 and random.random() < 0.3:
            # Extraer nombre de la consulta anterior si es posible
            palabras = consulta.split()
            posibles_nombres = [palabra for palabra in palabras if palabra[0].isupper() and len(palabra) > 3]

            # Si encontramos un posible nombre, usarlo para seguimiento
            if posibles_nombres:
                persona = posibles_nombres[0].rstrip('?.,;:!')

                # Posibles preguntas de seguimiento
                seguimientos = [
                    f"Y tambi√©n, ¬øcu√°l era el correo de {persona}?",
                    f"Por cierto, ¬øqu√© edad tiene {persona}?",
                    f"Ya que estamos, ¬ød√≥nde vive {persona}?",
                    f"Mmm, y ¬øcu√°l era el tel√©fono de {persona}?"
                ]

                # Seleccionar una pregunta de seguimiento
                seguimiento = random.choice(seguimientos)

                # Simular una pausa antes de la pregunta de seguimiento
                time.sleep(random.uniform(1.0, 2.0))

                # Hacer la pregunta de seguimiento
                mensaje_humano(seguimiento)

                # Procesar la consulta de seguimiento
                respuesta_seguimiento = procesar_consulta_real(seguimiento, registros, esquema, mapeo_columnas)

                # Mostrar respuesta del asistente
                mensaje_asistente(respuesta_seguimiento)

        # A√±adir reacciones a las respuestas (20% de probabilidad)
        elif random.random() < 0.2:
            # Posibles reacciones
            reacciones = [
                "Ah, perfecto!",
                "Gracias!",
                "Ok, entendido",
                "Genial, gracias",
                "Mmm, interesante",
                "Vaya, no lo sab√≠a"
            ]

            # Seleccionar una reacci√≥n
            reaccion = random.choice(reacciones)

            # Simular una pausa antes de la reacci√≥n
            time.sleep(random.uniform(0.8, 1.5))

            # Mostrar la reacci√≥n
            mensaje_humano(reaccion)

            # Respuesta del asistente a la reacci√≥n
            respuestas_reaccion = [
                "¬°De nada! ¬øNecesitas algo m√°s?",
                "Para eso estoy. ¬øAlguna otra consulta?",
                "¬°Claro! ¬øPuedo ayudarte con algo m√°s?",
                "Me alegra ser √∫til. ¬øQu√© m√°s quieres saber?"
            ]

            respuesta_reaccion = random.choice(respuestas_reaccion)
            mensaje_asistente(respuesta_reaccion)

            # No es necesario actualizar contexto en esta versi√≥n simplificada

        # Pausa variable entre consultas
        time.sleep(random.uniform(1.0, 2.5))

    # Mensaje de despedida
    mensaje_humano("Gracias por la informaci√≥n, eso es todo por ahora.")
    mensaje_asistente("¬°Ha sido un placer ayudarte! Si necesitas consultar algo m√°s de tu agenda, aqu√≠ estar√©. ¬°Hasta pronto!")

    print(f"\n{Fore.YELLOW}{'=' * 60}{Style.RESET_ALL}")
    print(f"{Fore.YELLOW}üèÅ FIN DE LA PRUEBA AUTOMATIZADA{Style.RESET_ALL}")
    print(f"{Fore.YELLOW}{'=' * 60}{Style.RESET_ALL}")

if __name__ == "__main__":
    ejecutar_prueba_automatizada()
